// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  email     String     @unique
  name      String
  image     String?
  phone     String
  password  String
  accounts  Account[]
  products  Product[]
  sessions  Session[]
  cart      CartItem[]
  orders    Order[]
  address   Address[]
  payment   Payment[]
}

model Account {
  id                String    @id @default(cuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         DateTime?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  oauthTokenSecret  String?
  oauthToken        String?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id                 String     @id @default(cuid())
  title              String     @db.VarChar(255)
  price              Int
  discount_price     Int?
  discount_pecent    Int?
  brand              String?
  slug               String?
  sku                String?
  category           String?
  description        String?    @db.Text
  overview           Json
  warranty           String?    @db.Text
  shippingInfo       String?    @db.Text
  image              Json?
  color              String?
  colors             Json?
  size               String?
  qty                Int        @default(1)
  userId             String
  user               User       @relation(fields: [userId], references: [id])
  instock            Boolean    @default(true)
  available_Quantity Int?
  createAt           DateTime   @default(now())
  review             Review[]
  cartItems          CartItem[]
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  // user User @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int?
  comment   String?  @db.LongText
  createAt  DateTime @default(now())
}

model Order {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  total_qty       Int
  total_price     Int
  orderItem       Json
  payment         Payment[]
  paymentStatus   String?   @default("pending")
  deliveryStatus  String?   @default("pending")
  paymentIntentId String?   @unique
  createAt        DateTime  @default(now())
}

model CartItem {
  id         String  @id @default(cuid())
  userId     String  @unique
  user       User    @relation(fields: [userId], references: [id])
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  qty        Int
  price      Int
  totalPrice Int
}

// model OrderItem {
//   id          String  @id @default(cuid())
//   orderId     String
//   order       Order   @relation(fields: [orderId], references: [id])
//   productId   String
//   product     Product @relation(fields: [productId], references: [id])
//   total_qty   Int
//   total_price Int
// }

model Address {
  id       String   @id @default(cuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  address  String?
  city     String?
  state    String?
  zip      String?
  country  String?
  createAt DateTime @default(now())
}

model Payment {
  id              String  @id @default(cuid())
  userId          String
  user            User    @relation(fields: [userId], references: [id])
  payment         String?
  payment_method  String?
  paymentIntentId String?
  status          String?
  amount          Int?
  orderId         String
  order           Order   @relation(fields: [orderId], references: [id])
}
